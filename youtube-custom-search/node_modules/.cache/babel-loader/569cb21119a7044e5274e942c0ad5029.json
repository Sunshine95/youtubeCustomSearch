{"ast":null,"code":"var _jsxFileName = \"/home/leog/Desktop/Github/youtubeCustomSearch/youtube-custom-search/src/app/custom-input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getVideos = async query => {\n  function authenticate() {\n    return gapi.auth2.getAuthInstance().signIn({\n      scope: \"https://www.googleapis.com/auth/youtube.force-ssl\"\n    }).then(function () {\n      console.log(\"Sign-in successful\");\n    }, function (err) {\n      console.error(\"Error signing in\", err);\n    });\n  }\n\n  function loadClient() {\n    gapi.client.setApiKey(\"YOUR_API_KEY\");\n    return gapi.client.load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\").then(function () {\n      console.log(\"GAPI client loaded for API\");\n    }, function (err) {\n      console.error(\"Error loading GAPI client for API\", err);\n    });\n  } // Make sure the client is loaded and sign-in is complete before calling this method.\n\n\n  function execute() {\n    return gapi.client.youtube.search.list({\n      part: [\"snippet\"],\n      maxResults: 10,\n      order: \"date\",\n      publishedAfter: \"2021-02-28T15:00:00Z\",\n      q: \"abcd\"\n    }).then(function (response) {\n      // Handle the results here (response.result has the parsed body).\n      console.log(\"Response\", response);\n    }, function (err) {\n      console.error(\"Execute error\", err);\n    });\n  }\n\n  gapi.load(\"client:auth2\", function () {\n    gapi.auth2.init({\n      client_id: \"YOUR_CLIENT_ID\"\n    });\n  }); // const url = new URL(\"https://youtube.googleapis.com/youtube/v3/search\");\n  // url.searchParams.append('part','snippet');\n  // url.searchParams.append(\"maxResults\", \"10\");\n  // url.searchParams.append(\"order\", \"date\");\n  // url.searchParams.append(\"type\", \"video\");\n  // url.searchParams.append(\"key\", \" ds dsa- fd\");\n  // console.log(url);\n  // const q = query.q;\n  // const publishedAfter = new Date(query.afterDate + ' ' + query.afterTime).toISOString().toString();\n  // const publishedBefore = query.beforeDate + query.beforeTime;\n  // console.log(publishedAfter);\n  // console.log(publishedBefore)\n  // const API_KEY = \"AIzaSyCv5w5qrUukzbhiSp5_VR1Q6XLAVCdEv-E\";\n  // const params =\n  //   `part=snippet&` +\n  //   `maxResults=10&` +\n  //   `order=date&` +\n  //   `type=video&` +\n  //   `key=${API_KEY}`+\n  //   `q=${q}&`+\n  //   `publishedBefore=${publishedBefore}&`+\n  //   `publishedAfter=${publishedAfter}`;\n  // const url = \"https://youtube.googleapis.com/youtube/v3/search?\" + params;\n  // console.log(url);\n  // fetch(url)\n  //   .then((response) => {\n  //     if (response.status === 200) {\n  //       return response.json();\n  //     } else {\n  //       throw new Error(response.statusText);\n  //     }\n  //   })\n  //   .then((videos) => {\n  //     console.log(videos);\n  //   })\n  //   .catch((error) => {\n  //     console.log(error);\n  //   });\n};\n\nconst CustomInput = () => {\n  _s();\n\n  const [query, setQuery] = useState({\n    q: \"\",\n    beforeDate: \"\",\n    beforeTime: \"\",\n    afterDate: \"\",\n    afterTime: \"\"\n  });\n  const [videos, setVideos] = useState([]);\n\n  const submitHandler = e => {\n    e.preventDefault();\n    getVideos(query);\n    setQuery({\n      q: \"\",\n      beforeDate: \"\",\n      beforeTime: \"\",\n      afterDate: \"\",\n      afterTime: \"\"\n    });\n  };\n\n  const handleChange = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setQuery(query => {\n      return { ...query,\n        [name]: value\n      };\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Custom Youtube Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"search\",\n          name: \"q\",\n          onChange: handleChange,\n          value: query.q,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            htmlFor: \"to\",\n            children: \"After:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"to\",\n            name: \"afterDate\",\n            value: query.afterDate,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            id: \"to\",\n            name: \"afterTime\",\n            value: query.afterTime,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"lable\", {\n            htmlFor: \"for\",\n            children: \"Before:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"for\",\n            name: \"beforeDate\",\n            value: query.beforeDate,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            id: \"for\",\n            name: \"beforeTime\",\n            value: query.beforeTime,\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CustomInput, \"yxAyWsCjYMuYoxv08sNFWMEv554=\");\n\n_c = CustomInput;\nexport default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["/home/leog/Desktop/Github/youtubeCustomSearch/youtube-custom-search/src/app/custom-input.js"],"names":["React","useState","getVideos","query","authenticate","gapi","auth2","getAuthInstance","signIn","scope","then","console","log","err","error","loadClient","client","setApiKey","load","execute","youtube","search","list","part","maxResults","order","publishedAfter","q","response","init","client_id","CustomInput","setQuery","beforeDate","beforeTime","afterDate","afterTime","videos","setVideos","submitHandler","e","preventDefault","handleChange","name","target","value","margin"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst getVideos = async (query) => {\n\n\n  function authenticate() {\n    return gapi.auth2\n      .getAuthInstance()\n      .signIn({ scope: \"https://www.googleapis.com/auth/youtube.force-ssl\" })\n      .then(\n        function () {\n          console.log(\"Sign-in successful\");\n        },\n        function (err) {\n          console.error(\"Error signing in\", err);\n        }\n      );\n  }\n  function loadClient() {\n    gapi.client.setApiKey(\"YOUR_API_KEY\");\n    return gapi.client\n      .load(\"https://www.googleapis.com/discovery/v1/apis/youtube/v3/rest\")\n      .then(\n        function () {\n          console.log(\"GAPI client loaded for API\");\n        },\n        function (err) {\n          console.error(\"Error loading GAPI client for API\", err);\n        }\n      );\n  }\n  // Make sure the client is loaded and sign-in is complete before calling this method.\n  function execute() {\n    return gapi.client.youtube.search\n      .list({\n        part: [\"snippet\"],\n        maxResults: 10,\n        order: \"date\",\n        publishedAfter: \"2021-02-28T15:00:00Z\",\n        q: \"abcd\",\n      })\n      .then(\n        function (response) {\n          // Handle the results here (response.result has the parsed body).\n          console.log(\"Response\", response);\n        },\n        function (err) {\n          console.error(\"Execute error\", err);\n        }\n      );\n  }\n  gapi.load(\"client:auth2\", function () {\n    gapi.auth2.init({ client_id: \"YOUR_CLIENT_ID\" });\n  });\n\n  // const url = new URL(\"https://youtube.googleapis.com/youtube/v3/search\");\n  // url.searchParams.append('part','snippet');\n  // url.searchParams.append(\"maxResults\", \"10\");\n  // url.searchParams.append(\"order\", \"date\");\n  // url.searchParams.append(\"type\", \"video\");\n  // url.searchParams.append(\"key\", \" ds dsa- fd\");\n\n\n  // console.log(url);\n  // const q = query.q;\n  // const publishedAfter = new Date(query.afterDate + ' ' + query.afterTime).toISOString().toString();\n  // const publishedBefore = query.beforeDate + query.beforeTime;\n  \n  // console.log(publishedAfter);\n  // console.log(publishedBefore)\n\n  \n  // const API_KEY = \"AIzaSyCv5w5qrUukzbhiSp5_VR1Q6XLAVCdEv-E\";\n\n  // const params =\n  //   `part=snippet&` +\n  //   `maxResults=10&` +\n  //   `order=date&` +\n  //   `type=video&` +\n  //   `key=${API_KEY}`+\n  //   `q=${q}&`+\n  //   `publishedBefore=${publishedBefore}&`+\n  //   `publishedAfter=${publishedAfter}`;\n\n  // const url = \"https://youtube.googleapis.com/youtube/v3/search?\" + params;\n  // console.log(url);\n\n  // fetch(url)\n  //   .then((response) => {\n  //     if (response.status === 200) {\n  //       return response.json();\n  //     } else {\n  //       throw new Error(response.statusText);\n  //     }\n  //   })\n  //   .then((videos) => {\n  //     console.log(videos);\n  //   })\n  //   .catch((error) => {\n  //     console.log(error);\n  //   });\n};\n\nconst CustomInput = () => {\n  const [query, setQuery] = useState({\n    q: \"\",\n    beforeDate: \"\",\n    beforeTime: \"\",\n    afterDate: \"\",\n    afterTime: \"\",\n  });\n\n  const [videos, setVideos] = useState([]);\n\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n\n    getVideos(query);\n    \n\n    setQuery({\n      q: \"\",\n      beforeDate: \"\",\n      beforeTime: \"\",\n      afterDate: \"\",\n      afterTime: \"\",\n    });\n  };\n\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    setQuery((query) => {\n      return { ...query, [name]: value };\n    });\n  };\n\n  return (\n    <>\n      <h2>Custom Youtube Search</h2>\n      <form className=\"form\" onSubmit={submitHandler}>\n        <div style={{ margin: \"20px\" }}>\n          <input\n            type=\"text\"\n            placeholder=\"search\"\n            name=\"q\"\n            onChange={handleChange}\n            value={query.q}\n            required\n          ></input>\n          <button type=\"submit\">Search</button>\n        </div>\n        <div className=\"item\">\n          <div>\n            <lable htmlFor=\"to\">After:</lable>\n            <input\n              type=\"date\"\n              id=\"to\"\n              name=\"afterDate\"\n              value={query.afterDate}\n              onChange={handleChange}\n            ></input>\n            <input\n              type=\"time\"\n              id=\"to\"\n              name=\"afterTime\"\n              value={query.afterTime}\n              onChange={handleChange}\n            ></input>\n          </div>\n          <div>\n            <lable htmlFor=\"for\">Before:</lable>\n            <input\n              type=\"date\"\n              id=\"for\"\n              name=\"beforeDate\"\n              value={query.beforeDate}\n              onChange={handleChange}\n            ></input>\n            <input\n              type=\"time\"\n              id=\"for\"\n              name=\"beforeTime\"\n              value={query.beforeTime}\n              onChange={handleChange}\n            ></input>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n\nexport default CustomInput;\n"]},"metadata":{},"sourceType":"module"}